{"ast":null,"code":"var _jsxFileName = \"/home/intern/simmax/hooks/src/NotDone.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useState } from 'react';\nimport { useEffect } from 'react';\nimport Task from './Task';\nimport NewTaskForm from './NewTaskForm';\nimport { deleteTask, patchTask, createTask } from './task-service/api-service';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function NotDone(props) {\n  _s();\n\n  let [tasks, setTasks] = useState([]);\n  useEffect(() => fetch('http://localhost:5000/api/tasktodo').then(response => response.json()).then(setTasks).then(), []);\n  console.log(tasks); // console.log(tasks.map((t=>(t.done ===false)&&(new Date(t.dueDate).getDate())))\n\n  const removeTask = t => {\n    deleteTask(t).then(setTasks(tasks.filter(task => t.id !== task.id)));\n  };\n\n  const updateDone = t => {\n    patchTask(t).then(() => setTasks([...tasks]));\n  };\n\n  const addTask = task => {\n    createTask(task, props.list).then(task => setTasks([...tasks, task]));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"task-list\",\n    children: [tasks.map((t, i) => /*#__PURE__*/_jsxDEV(Task, {\n      task: t,\n      getRemoveTask: removeTask,\n      updateDone: updateDone,\n      lists: props.lists,\n      today: false\n    }, i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(NewTaskForm, {\n      onSubmit: addTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 9\n  }, this);\n}\n\n_s(NotDone, \"Qtrz6vakdAi0z9WiU2BC9GkpZpA=\");\n\n_c = NotDone;\n\nvar _c;\n\n$RefreshReg$(_c, \"NotDone\");","map":{"version":3,"sources":["/home/intern/simmax/hooks/src/NotDone.js"],"names":["React","useState","useEffect","Task","NewTaskForm","deleteTask","patchTask","createTask","NotDone","props","tasks","setTasks","fetch","then","response","json","console","log","removeTask","t","filter","task","id","updateDone","addTask","list","map","i","lists"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,QAAR,QAAuB,OAAvB;AACA,SAASC,SAAT,QAA0B,OAA1B;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,SAAUC,UAAV,EAAqBC,SAArB,EAA+BC,UAA/B,QAAiD,4BAAjD;;AAGA,eAAe,SAASC,OAAT,CAAiBC,KAAjB,EAAwB;AAAA;;AACnC,MAAI,CAACC,KAAD,EAAOC,QAAP,IAAmBV,QAAQ,CAAC,EAAD,CAA/B;AACAC,EAAAA,SAAS,CAAC,MAAIU,KAAK,CAAC,oCAAD,CAAL,CACbC,IADa,CACRC,QAAQ,IAAEA,QAAQ,CAACC,IAAT,EADF,EAEbF,IAFa,CAERF,QAFQ,EAEEE,IAFF,EAAL,EAGR,EAHQ,CAAT;AAIAG,EAAAA,OAAO,CAACC,GAAR,CAAYP,KAAZ,EANmC,CAOnC;;AACA,QAAMQ,UAAU,GAAIC,CAAD,IAAO;AACtBd,IAAAA,UAAU,CAACc,CAAD,CAAV,CAAcN,IAAd,CAAmBF,QAAQ,CAACD,KAAK,CAACU,MAAN,CAAcC,IAAD,IAAUF,CAAC,CAACG,EAAF,KAASD,IAAI,CAACC,EAArC,CAAD,CAA3B;AACD,GAFH;;AAIE,QAAMC,UAAU,GAAIJ,CAAD,IAAO;AACxBb,IAAAA,SAAS,CAACa,CAAD,CAAT,CAAaN,IAAb,CAAkB,MAAMF,QAAQ,CAAC,CAAC,GAAGD,KAAJ,CAAD,CAAhC;AACD,GAFD;;AAIA,QAAMc,OAAO,GAAIH,IAAD,IAAU;AACxBd,IAAAA,UAAU,CAACc,IAAD,EAAOZ,KAAK,CAACgB,IAAb,CAAV,CAA6BZ,IAA7B,CAAmCQ,IAAD,IAAUV,QAAQ,CAAC,CAAC,GAAGD,KAAJ,EAAWW,IAAX,CAAD,CAApD;AACD,GAFD;;AAGF,sBACI;AAAK,IAAA,EAAE,EAAC,WAAR;AAAA,eAEIX,KAAK,CAACgB,GAAN,CAAU,CAACP,CAAD,EAAIQ,CAAJ,kBACd,QAAC,IAAD;AAEE,MAAA,IAAI,EAAER,CAFR;AAGE,MAAA,aAAa,EAAED,UAHjB;AAIE,MAAA,UAAU,EAAEK,UAJd;AAKE,MAAA,KAAK,EAAEd,KAAK,CAACmB,KALf;AAME,MAAA,KAAK,EAAE;AANT,OACOD,CADP;AAAA;AAAA;AAAA;AAAA,YADI,CAFJ,eAaJ,QAAC,WAAD;AAAa,MAAA,QAAQ,EAAEH;AAAvB;AAAA;AAAA;AAAA;AAAA,YAbI;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAiBH;;GApCuBhB,O;;KAAAA,O","sourcesContent":["import React from 'react';\nimport {useState} from 'react';\nimport { useEffect } from 'react';\nimport Task from './Task';\nimport NewTaskForm from './NewTaskForm';\nimport  { deleteTask,patchTask,createTask } from './task-service/api-service';\n\n\nexport default function NotDone(props) {\n    let [tasks,setTasks] = useState([]);\n    useEffect(()=>fetch('http://localhost:5000/api/tasktodo')\n    .then(response=>response.json())\n    .then(setTasks).then()\n    ,[]);\n    console.log(tasks)\n    // console.log(tasks.map((t=>(t.done ===false)&&(new Date(t.dueDate).getDate())))\n    const removeTask = (t) => {\n        deleteTask(t).then(setTasks(tasks.filter((task) => t.id !== task.id)));\n      };\n    \n      const updateDone = (t) => {\n        patchTask(t).then(() => setTasks([...tasks]));\n      };\n    \n      const addTask = (task) => {\n        createTask(task, props.list).then((task) => setTasks([...tasks, task]));\n      };\n    return (\n        <div id=\"task-list\">\n            \n           {tasks.map((t, i) => (\n        <Task\n          key={i}\n          task={t}\n          getRemoveTask={removeTask}\n          updateDone={updateDone}\n          lists={props.lists}\n          today={false}\n        />\n        \n      ))}\n    <NewTaskForm onSubmit={addTask} />\n            </div>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}