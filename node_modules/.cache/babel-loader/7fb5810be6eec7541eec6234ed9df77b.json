{"ast":null,"code":"var _jsxFileName = \"/home/intern/simmax/hooks/src/NotDone.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useState } from 'react';\nimport { useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function NotDone() {\n  _s();\n\n  const [tasks, setTasks] = useState('');\n  useEffect(() => fetch('http://localhost:5000/api/tasktodo').then(response => response.json()).then(ts => setTasks(ts)), []);\n\n  function overdue(task) {\n    if (task.dueDate < new Date().now.Date) {\n      return task;\n    }\n  }\n\n  console.log(tasks);\n  console.log(overdue(tasks[0]));\n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 9\n  }, this);\n}\n\n_s(NotDone, \"v0iePqy0wys8ejnk+cZ4aClAL20=\");\n\n_c = NotDone;\n\nvar _c;\n\n$RefreshReg$(_c, \"NotDone\");","map":{"version":3,"sources":["/home/intern/simmax/hooks/src/NotDone.js"],"names":["React","useState","useEffect","NotDone","tasks","setTasks","fetch","then","response","json","ts","overdue","task","dueDate","Date","now","console","log"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,QAAR,QAAuB,OAAvB;AACA,SAASC,SAAT,QAA0B,OAA1B;;AACA,eAAe,SAASC,OAAT,GAAmB;AAAA;;AAC9B,QAAM,CAACC,KAAD,EAAOC,QAAP,IAAmBJ,QAAQ,CAAC,EAAD,CAAjC;AACAC,EAAAA,SAAS,CAAC,MAAII,KAAK,CAAC,oCAAD,CAAL,CACdC,IADc,CACTC,QAAQ,IAAEA,QAAQ,CAACC,IAAT,EADD,EAEdF,IAFc,CAETG,EAAE,IAAGL,QAAQ,CAACK,EAAD,CAFJ,CAAL,EAGR,EAHQ,CAAT;;AAIA,WAASC,OAAT,CAAkBC,IAAlB,EAAuB;AACnB,QAAIA,IAAI,CAACC,OAAL,GAAe,IAAIC,IAAJ,GAAWC,GAAX,CAAeD,IAAlC,EAAuC;AACnC,aAAOF,IAAP;AACH;AACJ;;AACDI,EAAAA,OAAO,CAACC,GAAR,CAAYb,KAAZ;AACAY,EAAAA,OAAO,CAACC,GAAR,CAAYN,OAAO,CAACP,KAAK,CAAC,CAAD,CAAN,CAAnB;AACA,sBACI;AAAA;AAAA;AAAA;AAAA,UADJ;AAIH;;GAjBuBD,O;;KAAAA,O","sourcesContent":["import React from 'react';\nimport {useState} from 'react';\nimport { useEffect } from 'react';\nexport default function NotDone() {\n    const [tasks,setTasks] = useState('');\n    useEffect(()=>fetch('http://localhost:5000/api/tasktodo').\n    then(response=>response.json()).\n    then(ts =>setTasks(ts))\n    ,[])\n    function overdue (task){\n        if (task.dueDate < new Date().now.Date){\n            return task\n        } \n    }\n    console.log(tasks)\n    console.log(overdue(tasks[0]));\n    return (\n        <div>\n            </div>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}