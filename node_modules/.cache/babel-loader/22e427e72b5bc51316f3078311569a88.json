{"ast":null,"code":"var _jsxFileName = \"/home/intern/simmax/hooks/src/TodoListSidebar.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useRef, useState } from 'react';\nimport './styles/sidebar.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function TodoListSidebar({\n  lists,\n  onSelect,\n  selectedList\n}) {\n  _s();\n\n  const [list, setSelectedList] = useState(selectedList);\n\n  const setActive = l => {\n    if (l == list) return 'selected-list';\n  };\n\n  return lists.map(l => /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: () => {\n      onSelect(l);\n      setSelectedList(l);\n    },\n    className: setActive(l),\n    children: l.title\n  }, l.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 24\n  }, this));\n}\n\n_s(TodoListSidebar, \"jsH+DIpzYiiU5v4I5vXxxx1kuC4=\");\n\n_c = TodoListSidebar;\n\nvar _c;\n\n$RefreshReg$(_c, \"TodoListSidebar\");","map":{"version":3,"sources":["/home/intern/simmax/hooks/src/TodoListSidebar.js"],"names":["React","useRef","useState","TodoListSidebar","lists","onSelect","selectedList","list","setSelectedList","setActive","l","map","title","id"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,MAAR,EAAgBC,QAAhB,QAA+B,OAA/B;AACA,OAAO,sBAAP;;AACA,eAAe,SAASC,eAAT,CAAyB;AAACC,EAAAA,KAAD;AAAOC,EAAAA,QAAP;AAAgBC,EAAAA;AAAhB,CAAzB,EAAwD;AAAA;;AACnE,QAAM,CAACC,IAAD,EAAMC,eAAN,IAAyBN,QAAQ,CAACI,YAAD,CAAvC;;AACA,QAAMG,SAAS,GAAIC,CAAD,IAAO;AAAC,QAAIA,CAAC,IAAIH,IAAT,EAC1B,OAAO,eAAP;AAAuB,GADvB;;AAGA,SACIH,KAAK,CAACO,GAAN,CAAUD,CAAC,iBAAI;AAAS,IAAA,OAAO,EAAE,MAAI;AAACL,MAAAA,QAAQ,CAACK,CAAD,CAAR;AAAaF,MAAAA,eAAe,CAACE,CAAD,CAAf;AAAmB,KAAvD;AAAyD,IAAA,SAAS,EAAED,SAAS,CAACC,CAAD,CAA7E;AAAA,cAA8FA,CAAC,CAACE;AAAhG,KAAuFF,CAAC,CAACG,EAAzF;AAAA;AAAA;AAAA;AAAA,UAAf,CADJ;AAGH;;GARuBV,e;;KAAAA,e","sourcesContent":["import React from 'react'\nimport {useRef, useState} from 'react';\nimport './styles/sidebar.css'\nexport default function TodoListSidebar({lists,onSelect,selectedList}) {\n    const [list,setSelectedList] = useState(selectedList)\n    const setActive = (l) => {if (l == list) \n    return 'selected-list'}\n\n    return (\n        lists.map(l => <button  onClick={()=>{onSelect(l); setSelectedList(l)}} className={setActive(l)} key={l.id}>{l.title}</button>)\n    )\n}\n"]},"metadata":{},"sourceType":"module"}