{"ast":null,"code":"var _jsxFileName = \"/home/intern/simmax/hooks/src/components/Tasks.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport Task from \"./Task\";\nimport \"../styles/Tasks.css\";\nimport { useState, useEffect } from \"react\";\nimport NewTaskForm from \"../NewTaskForm\";\nimport { useParams } from \"react-router\";\nimport { loadTasks } from '../store/tasks/actions';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { deleteTask, patchTask, createTask } from \"../task-service/api-service\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst url = \"http://localhost:5000/api/\";\nexport default function Tasks(props) {\n  _s();\n\n  let lists = props.lists;\n  let {\n    id\n  } = useParams();\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(loadTasks(id));\n  }, [id]);\n  const tasks = useSelector(state => state.tasks); // const removeTask = (t) => {\n  //   deleteTask(t).then(setTasks(tasks.filter((task) => t.id !== task.id)));\n  // };\n  // const updateDone = (t) => {\n  //   patchTask(t).then(() => setTasks([...tasks]));\n  // };\n\n  const addTask = task => {\n    task.listId = id;\n    dispatch(createTask(task));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"task-list\",\n    children: [tasks.map((t, i) => /*#__PURE__*/_jsxDEV(Task, {\n      task: t,\n      lists: lists\n    }, i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(NewTaskForm, {\n      onSubmit: addTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Tasks, \"WWn2Rq1JwPhsaBoisj2lECJbuww=\", false, function () {\n  return [useParams, useDispatch, useSelector];\n});\n\n_c = Tasks;\n\nvar _c;\n\n$RefreshReg$(_c, \"Tasks\");","map":{"version":3,"sources":["/home/intern/simmax/hooks/src/components/Tasks.js"],"names":["React","Task","useState","useEffect","NewTaskForm","useParams","loadTasks","useDispatch","useSelector","deleteTask","patchTask","createTask","url","Tasks","props","lists","id","dispatch","tasks","state","addTask","task","listId","map","t","i"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAO,qBAAP;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,WAAP,MAAwB,gBAAxB;AACA,SAASC,SAAT,QAA0B,cAA1B;AACA,SAAQC,SAAR,QAAwB,wBAAxB;AACA,SAASC,WAAT,EAAqBC,WAArB,QAAwC,aAAxC;AAEA,SAASC,UAAT,EAAqBC,SAArB,EAAgCC,UAAhC,QAAkD,6BAAlD;;AACA,MAAMC,GAAG,GAAG,4BAAZ;AAEA,eAAe,SAASC,KAAT,CAAeC,KAAf,EAAsB;AAAA;;AACnC,MAAIC,KAAK,GAAGD,KAAK,CAACC,KAAlB;AACA,MAAI;AAAEC,IAAAA;AAAF,MAASX,SAAS,EAAtB;AACA,QAAMY,QAAQ,GAAGV,WAAW,EAA5B;AACAJ,EAAAA,SAAS,CAAC,MAAM;AACdc,IAAAA,QAAQ,CAACX,SAAS,CAACU,EAAD,CAAV,CAAR;AACD,GAFQ,EAEN,CAACA,EAAD,CAFM,CAAT;AAIA,QAAME,KAAK,GAAGV,WAAW,CAACW,KAAK,IAAEA,KAAK,CAACD,KAAd,CAAzB,CARmC,CAWnC;AACA;AACA;AAEA;AACA;AACA;;AAEA,QAAME,OAAO,GAAIC,IAAD,IAAS;AACvBA,IAAAA,IAAI,CAACC,MAAL,GAAYN,EAAZ;AACAC,IAAAA,QAAQ,CAACN,UAAU,CAACU,IAAD,CAAX,CAAR;AACD,GAHD;;AAIA,sBACE;AAAK,IAAA,EAAE,EAAC,WAAR;AAAA,eACGH,KAAK,CAACK,GAAN,CAAU,CAACC,CAAD,EAAIC,CAAJ,kBACT,QAAC,IAAD;AAEE,MAAA,IAAI,EAAED,CAFR;AAGE,MAAA,KAAK,EAAET;AAHT,OACOU,CADP;AAAA;AAAA;AAAA;AAAA,YADD,CADH,eAQE,QAAC,WAAD;AAAa,MAAA,QAAQ,EAAEL;AAAvB;AAAA;AAAA;AAAA;AAAA,YARF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAYD;;GAnCuBP,K;UAETR,S,EACIE,W,EAKHC,W;;;KARQK,K","sourcesContent":["import React from \"react\";\nimport Task from \"./Task\";\nimport \"../styles/Tasks.css\";\nimport { useState, useEffect } from \"react\";\nimport NewTaskForm from \"../NewTaskForm\";\nimport { useParams } from \"react-router\";\nimport {loadTasks} from '../store/tasks/actions'\nimport { useDispatch,useSelector } from \"react-redux\";\n\nimport { deleteTask, patchTask, createTask } from \"../task-service/api-service\";\nconst url = \"http://localhost:5000/api/\";\n\nexport default function Tasks(props) {\n  let lists = props.lists;\n  let { id } = useParams();\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(loadTasks(id))\n  }, [id]);\n\n  const tasks = useSelector(state=>state.tasks)\n  \n\n  // const removeTask = (t) => {\n  //   deleteTask(t).then(setTasks(tasks.filter((task) => t.id !== task.id)));\n  // };\n\n  // const updateDone = (t) => {\n  //   patchTask(t).then(() => setTasks([...tasks]));\n  // };\n\n  const addTask = (task) =>{\n    task.listId=id\n    dispatch(createTask(task))\n  }\n  return (\n    <div id=\"task-list\">\n      {tasks.map((t, i) => (\n        <Task\n          key={i}\n          task={t}\n          lists={lists}\n        />\n      ))}\n      <NewTaskForm onSubmit={addTask}/>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}