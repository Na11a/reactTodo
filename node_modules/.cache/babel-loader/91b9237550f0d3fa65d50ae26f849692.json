{"ast":null,"code":"var _jsxFileName = \"/home/intern/simmax/hooks/src/Tasks.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport Task from \"./Task\";\nimport \"./styles/Tasks.css\";\nimport { useState, useEffect } from \"react\";\nimport NewTaskForm from \"./NewTaskForm\";\nimport { useParams } from \"react-router\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst url = \"http://localhost:5000/api/\";\nexport default function Tasks(props) {\n  _s();\n\n  let {\n    id\n  } = useParams();\n  const [tasks, setTasks] = useState([]);\n\n  const removeTask = t => {\n    removeTask(t).then(setTasks(tasks.filter(task => t.id !== task.id)));\n  };\n\n  const updateDone = t => {\n    fetch(url + `tasktodo/${t.id}`, {\n      method: \"PATCH\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(t)\n    }).then(response => response.json()).then(() => setTasks([...tasks]));\n  };\n\n  useEffect(() => {\n    fetch(url + `tasklist/${id}/tasks`).then(response => response.json()).then(setTasks);\n  }, [id]);\n\n  const addTask = task => {\n    task = { ...task,\n      taskListId: props.list.id\n    };\n    fetch(url + `tasktodo/`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(task)\n    }).then(response => response.json()).then(task => setTasks([...tasks, task]));\n  };\n\n  console.log(props);\n\n  if (props.tassk !== undefined) {\n    setTasks(props.tasks);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"task-list\",\n    children: [tasks.map((t, i) => /*#__PURE__*/_jsxDEV(Task, {\n      task: t,\n      getRemoveTask: removeTask,\n      updateDone: updateDone\n    }, i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(NewTaskForm, {\n      onSubmit: addTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Tasks, \"FuqQoe0StZCC94BVEov0tJoZvy0=\", false, function () {\n  return [useParams];\n});\n\n_c = Tasks;\n\nvar _c;\n\n$RefreshReg$(_c, \"Tasks\");","map":{"version":3,"sources":["/home/intern/simmax/hooks/src/Tasks.js"],"names":["React","Task","useState","useEffect","NewTaskForm","useParams","url","Tasks","props","id","tasks","setTasks","removeTask","t","then","filter","task","updateDone","fetch","method","headers","body","JSON","stringify","response","json","addTask","taskListId","list","console","log","tassk","undefined","map","i"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Task from \"./Task\";\nimport \"./styles/Tasks.css\";\nimport { useState, useEffect } from \"react\";\nimport NewTaskForm from \"./NewTaskForm\";\nimport { useParams } from \"react-router\";\nconst url = \"http://localhost:5000/api/\";\n\nexport default function Tasks(props) {\n  let { id } = useParams();\n  const [tasks, setTasks] = useState([]);\n\n  const removeTask = (t) => {\n      removeTask(t)\n        .then(setTasks(tasks.filter((task) => t.id !== task.id)));\n  };\n\n  const updateDone = (t) => {\n    fetch(url + `tasktodo/${t.id}`, {\n      method: \"PATCH\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n\n      body: JSON.stringify(t),\n    })\n      .then((response) => response.json())\n      .then(() => setTasks([...tasks]));\n  };\n\n  useEffect(() => {\n    fetch(url + `tasklist/${id}/tasks`)\n      .then((response) => response.json())\n      .then(setTasks);\n  }, [id]);\n\n  const addTask = (task) => {\n    task = { ...task, taskListId: props.list.id };\n    fetch(url + `tasktodo/`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n\n      body: JSON.stringify(task),\n    })\n      .then((response) => response.json())\n      .then((task) => setTasks([...tasks, task]));\n  };\n  console.log(props)\n  if(props.tassk !== undefined){\n    setTasks(props.tasks)\n  }\n  return (\n    <div id=\"task-list\">\n      {tasks.map((t, i) => (\n        <Task\n          key={i}\n          task={t}\n          getRemoveTask={removeTask}\n          updateDone={updateDone}\n        />\n      ))}\n      <NewTaskForm onSubmit={addTask} />\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}