{"ast":null,"code":"export const SHOW_TASKLIST = 'SHOW_TASKLIST';\nexport const ADD_TASK = 'ADD_TASK';\nexport const loadDashboard = () => dispatch => {\n  fetch('http://localhost:5000/api/tasklist').then(res => res.json()).then(lists => dispatch({\n    type: SHOW_TASKLIST,\n    payload: lists\n  }));\n};\nexport const createTask = () => dispatch => {\n  fetch(url + `tasktodo/`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({ ...task\n    })\n  }).then(response => response.json().then);\n};","map":{"version":3,"sources":["/home/intern/simmax/hooks/src/store/dashboard/actions.js"],"names":["SHOW_TASKLIST","ADD_TASK","loadDashboard","dispatch","fetch","then","res","json","lists","type","payload","createTask","url","method","headers","body","JSON","stringify","task","response"],"mappings":"AAAA,OAAO,MAAMA,aAAa,GAAG,eAAtB;AACP,OAAO,MAAMC,QAAQ,GAAG,UAAjB;AACP,OAAO,MAAMC,aAAa,GAAE,MAAKC,QAAQ,IAAI;AACzCC,EAAAA,KAAK,CAAC,oCAAD,CAAL,CACKC,IADL,CACUC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADjB,EAEKF,IAFL,CAEUG,KAAK,IAAIL,QAAQ,CAAC;AACpBM,IAAAA,IAAI,EAAET,aADc;AAEpBU,IAAAA,OAAO,EAAEF;AAFW,GAAD,CAF3B;AAMH,CAPM;AAQP,OAAO,MAAMG,UAAU,GAAG,MAAKR,QAAQ,IAAG;AAClCC,EAAAA,KAAK,CAACQ,GAAG,GAAI,WAAR,EAAoB;AACvBC,IAAAA,MAAM,EAAE,MADe;AAEvBC,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT,KAFc;AAMvBC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe,EAAE,GAAGC;AAAL,KAAf;AANiB,GAApB,CAAL,CAQGb,IARH,CAQSc,QAAD,IAAcA,QAAQ,CAACZ,IAAT,GACrBF,IATD;AASO,CAVR","sourcesContent":["export const SHOW_TASKLIST = 'SHOW_TASKLIST'\nexport const ADD_TASK = 'ADD_TASK'\nexport const loadDashboard =() =>dispatch => {\n    fetch('http://localhost:5000/api/tasklist')\n        .then(res => res.json())\n        .then(lists => dispatch({\n            type: SHOW_TASKLIST,\n            payload: lists\n        }))\n}\nexport const createTask = () =>dispatch =>{\n        fetch(url + `tasktodo/`, {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n    \n          body: JSON.stringify({ ...task }),\n        })\n          .then((response) => response.json()\n        .then)}\n"]},"metadata":{},"sourceType":"module"}